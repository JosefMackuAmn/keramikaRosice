export const postCartHandler = async ({ action, csrf, amount, productId }) => {
    switch (action) {
        case 'ADD':
        case 'REMOVE':

            // Create body object
            const bodyObj = {
                action: action,
                amount: amount,
                productId: productId
            };

            // Send request
            return fetch('/kosik', {
                method: 'POST',
                headers: {
                    'X-CSRF-Token': csrf,
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify(bodyObj)
            }).then(res => {
                return Promise.all([res.clone(), res.json()]);
            }).then(promises => {
                const [ response, body ] = promises;
                if (!(response.ok && response.status >= 200 && response.status < 300)) {

                    throw new Error(body.msg);
                }
                const updatedCart = body.cart;                
                return updatedCart;
            }).catch(err => {
                throw new Error(err);
            });

            break;
        default: throw new Error('Non-existing cart action');
    }
}
export const orderSubmitHandler = e => {

    ///// Validatings input values 

    const emailValue = fcns.validateInput(formELs.email);
    const firstNameValue = fcns.validateInput(formELs.firstName);
    const lastNameValue = fcns.validateInput(formELs.lastName);
    const phoneValue = fcns.validateInput(formELs.phone);
    const streetValue = fcns.validateInput(formELs.street);
    const cityValue = fcns.validateInput(formELs.city);
    const zipCodeValue = fcns.validateInput(formELs.zipCode);
    const deliveryValue = fcns.validateInput(formELs.delivery);
    const paymentValue = fcns.validateInput(formELs.payment);

    // If validation has failed (at least one element has class 'invalid'), returning
    
    if (document.querySelector('.invalid')) {
        e.preventDefault();
        return;
    }
}
////
//SUBMIT
//
const orderForm = document.getElementById('order-form');

export const formELs = orderForm ? orderForm.elements : undefined;

export const RegexMap = orderForm ? new Map([
    [formELs.email, /^[a-zA-Z0-9!#$_*?^{}~-]+(\.[a-zA-Z0-9!#$_*?^{}~-]+)*@([a-zA-Z-]+\.)+[a-zA-z]{2,}$/],
    [formELs.firstName, /(.+){2,}/],
    [formELs.lastName, /(.+){2,}/],
    [formELs.phone, /^[0-9]{9}$/],
    [formELs.street, /(.+){2,}/],
    [formELs.city, /(.+){2,}/],
    [formELs.zipCode, /[0-9]{5}/],
    [formELs.delivery, /(ZAS|POS|OOD)/],
    [formELs.payment, /(DOB|CRD|BTR)/],
    [formELs.packetaId, /[0-9]{1,}/]
]
) : undefined;



export  const otherArgsMap = orderForm ? new Map([
    // [input, [markedElId, removeWhiteSpace]]
    [formELs.phone, [undefined, true]],
    [formELs.zipCode, [undefined, true]],
    [formELs.payment, ['order-payment']],
    [formELs.delivery, ['order-delivery']]
]) : undefined;
/////
// SUBMIT
/////

//// Managing the disabled state
export const refreshSubmitBtn = (agreeGDPR, agreeConditions, submitToCartBtn)  => {
    
    // If both inputs are checked, disabled class on the submit button is removed
   if (agreeGDPR.checked && agreeConditions.checked) {

       submitToCartBtn.classList.remove('disabled');
       submitToCartBtn.removeAttribute('disabled');

   } else {

    submitToCartBtn.classList.add('disabled');
    submitToCartBtn.setAttribute('disabled', '');

   }
}
export function validateInput(input) {

    // Getting regex for the current input
   const inputRegExp = RegexMap.get(input);
    if(!inputRegExp) {
        return;
    }

    // Getting other arguments, if otherArgsMap contains them for current input
    let markedElId;
    let removeWhiteSpace;
    if (otherArgsMap.get(input)) {
        [markedElId, removeWhiteSpace] = otherArgsMap.get(input);
    }
    
    // Getting input value, if specified, removing all single space characters (f.e in the case of zipcode)
    let inputValue;
    if (removeWhiteSpace) {
        inputValue = input.value.trim().replace(/\s/g, "");
    } else {
        inputValue = input.value.trim();
    }

    
    // Getting element, on which the 'invalid' class is added in validation fail cases
    let markedEl;
    if (markedElId) {
        markedEl = document.getElementById(markedElId);
    } else {
        markedEl = input;
    }

    // If input value doesn´t match the regular expression, validation 'fails' - the invalid class is added on markedEl, new Error is thrown
    if(!inputRegExp.test(inputValue)) {
        markedEl.classList.add('invalid');
    } else {
        markedEl.classList.remove('invalid');
    }

    return inputValue;
}
/////
// MODAL
/////
export const createModal = (text, subText, buttonText) => {
    const modal = document.createElement('div');
    const body = document.body;

    modal.classList.add('modal');
    modal.innerHTML = `<div class="modal__backdrop"></div>
    <div class="modal__window">
        <div class="modal__text">${text}</div>
        <div class="modal__subtext">${subText}</div>
        <button class="modal__button">${buttonText}</button>
        <div class="close-button"></div>
    </div>`;
   
    body.appendChild(modal);

    const modalButton = modal.querySelector('.modal__button');
    const modalCloseButton = modal.querySelector('.close-button');

    modalButton.addEventListener('click', removeModal.bind(this, modal));
    modalCloseButton.addEventListener('click', removeModal.bind(this, modal))
}

export const removeModal = modal => {
    modal.parentElement.removeChild(modal);
}
/////
// CART-HINT
/////
export const removeCartHint = cartHint => {
    cartHint.parentElement.removeChild(cartHint);
}
export const createCartHint = (state, text) => {

    // Removing current cart hint if any
    const currentCartHint = document.querySelector('.cart-hint');

    if(currentCartHint) {
        currentCartHint.parentElement.removeChild(currentCartHint);
    }

    // State = 'success' | 'failed'
    if(state !== 'success' && state !== 'failed') {
        return;
    }

    let cartHint = document.createElement('div');
    const body = document.body;

    cartHint.classList.add('cart-hint');
    cartHint.classList.add('cart-hint--visible');
    cartHint.classList.add(`cart-hint--${state}`);
    cartHint.innerHTML = `<div class="cart-hint__text">
    ${text}
    </div>
    <div class="cart-hint__symbol cart-hint__symbol--${state}">

    </div>
    <button class="close-button">

    </button>`;

    body.appendChild(cartHint);

    const cartHintCloseButton = cartHint.querySelector('button');
    cartHintCloseButton.addEventListener('click', removeCartHint.bind(this, cartHint));

    // Cart hint gradually dissapears after 5 seconds
    setTimeout(() => {
        if(cartHint) {
            cartHint.addEventListener('animationend', () => {
                removeCartHint(cartHint);
            })
            switchClass(cartHint, 'cart-hint--visible', 'cart-hint--hiding');
        }
    }, 5000)
}
/////
//CART
/////
export const addToCart = (postCartData) => {

    return ajax.postCartHandler(postCartData)
    .then((updatedCart) => {
        createCartHint('success', `Produkt byl úspěšně přidán do košíku`);         
        return updatedCart;           
    }).catch(err => {
        createCartHint('failed', `Nastala chyba, produkt nebyl přidán do košíku`);
    });

};
export const removeFromCart = (postCartData) => {

    return ajax.postCartHandler(postCartData)
    .then((updatedCart) => {
        createCartHint('success', `Produkt byl úspěšně odebrán z košíku`);         
        return updatedCart;           
    }).catch(err => {
        createCartHint('failed', `Nastala chyba, produkt nebyl odebrán z košíku`);
    });

}
export const updateCartItem = (cartItem, updatedCart) => {

    const cartItemObj = updatedCart.items.find(item => {
        return item.product._id = cartItem.dataset.productid;
    })

    const amountEl = cartItem.querySelector('.cart-item__amount-box__amount');
    const priceEl = cartItem.querySelector('.cart-item__price');

    if(!cartItemObj) {

        cartItem.parentElement.removeChild(cartItem);

    } else {

        amountEl.textContent = `${cartItemObj.amount}ks`;
        priceEl.textContent = +cartItemObj.product.price * cartItemObj.amount + 'Kč';

    }

    updateTotalPrice(updatedCart);
    updateCartPage();
    updateCartIcon(updatedCart);
}

export const updateCartPage = () => {
    
    const cartItem = document.querySelector('.cart-item');

    const cartOrder = document.getElementById('cart-order');
    const emptyCartContent = document.querySelector('.cart__cart-content__empty');
    const summary = document.querySelector('.cart__cart-content__summary');
    const dph = document.querySelector('.cart__cart-content__dph');
    const button = document.getElementById('to-order');

    if(!cartItem) {

        cartOrder.style.display = 'none';
        summary.style.display  = 'none';
        emptyCartContent.style.display = 'block';
        dph.style.display = 'none';
        button.classList.remove('hidden');
        button.classList.add('hidden');

    } else {

        cartOrder.style.display = 'flex';
        summary.style.display  = 'flex';
        emptyCartContent.style.display = 'none';
        dph.style.display = 'block';
        button.classList.remove('hidden');
    }
}

export const updateTotalPrice  = (updatedCart) => {
    
    const priceEl = document.querySelector(".cart__cart-content__summary__price");

    priceEl.textContent = `${updatedCart.total}Kč`;

}
/////
//HEADER
/////
export const updateCartIcon = (updatedCart) => {
    const cartAmountEl = document.querySelector('.header__cart-amount');
    const cartAmount = updatedCart.items.reduce((prevValue, curValue, id) => {
        return prevValue + updatedCart.items[id].amount;
    }, 0)
    if(cartAmount <= 0) {
        cartAmountEl.style.display = 'none';
    } else {
        cartAmountEl.style.display = 'flex';
    }
    cartAmountEl.textContent = cartAmount;
}
// Switching between two classes, if an element has a class A, the class A is replaced for class B, if an element has a class B, the class B is replaced for the class A
export const switchClass = (el, classA, classB) => {
    if ([...el.classList].includes(classA)) {
        el.classList.remove(classA);
        el.classList.add(classB);
    } else {
        el.classList.remove(classB);
        el.classList.add(classA);
    }
}

// Rendering the element or removing it from the screen smoothly - with animations
// The element must have 3 CSS Classes available - hidden class, visible class, hiding class
// Hidden class - display: none, no animation
// Visible class - display: block (or whatever except none) and an animation of the element appearing on the page (sliding -in or so)
// Hiding class - animation of the element disappearing
// Element has only one of these classes at a time.
// The hiding class is changed to hidden class after 'animationend' event on the element
export const showOrHideEl = (element, hiddenClass, visibleClass, hidingClass) => {
    if([...element.classList].includes(hiddenClass)) {
        element.classList.remove(hiddenClass);
        element.classList.add(visibleClass);
    } else {
        element.classList.remove(visibleClass);
        element.classList.add(hidingClass);

        const animationEndHandler =  function(event) {
        if(event.pseudoElement) {
            element.addEventListener('animationend', animationEndHandler,  {
            capture: false,
            once: true,
            passive: false
            });
            return;
        }
        element.classList.remove(hidingClass);
        element.classList.add(hiddenClass);
        }

        element.addEventListener('animationend', animationEndHandler, {
        capture: false,
        once: true,
        passive: false
        });
    }
}
import state from './utils/state';
import * as fcns from './utils/functions';
import * as ajax from './utils/ajax';
import { formELs }  from './utils/data';

  
///////////////////////////////////
///// CALLING READY FUNCTION
fcns.ready(() => {

    /////
    // SHOW MODAL
    /////

    const params = new URLSearchParams(window.location.search);
    
    if (params.has('payment')) {

        const payment = params.get('payment');

        if (payment === 'success') {
            fcns.createModal('Úspěch', 'Objednávka proběhla úspěšně', 'OK')
        } else if (payment === 'canceled') {
            fcns.createModal('Storno', 'Platba byla přerušena, ale prodejce byl o Vaší objednávce informován a vyřeší to s Vámi osobní domluvou.', 'OK')
        }

        if(payment === 'BTR') {

            if(params.has('success') && params.has('mailSent')) {

                const success = params.get('success');
                const mailSent = params.get('mailSent');

                if(success === 'true' && mailSent === 'true') {
                    fcns.createModal('Odesláno', 'Objednávka byla odeslána. <em> Byl vám zaslán mail, prosím, postupujte podle pokynů v něm. </em>', 'OK', true)
                }

                if(success === 'true' && mailSent === 'false') {
                    fcns.createModal('Chyba', '<em> Nepodařil se odeslat mail s informacemi k platbě, prosím, kontaktujte mě na adrese keramikarosice@seznam.cz </em>', 'OK', true)
                }

                if(success === 'false' && mailSent === 'true') {
                    fcns.createModal('Chyba', 'Nastala chyba, objednávka nebyla odeslána.', 'OK')
                }

                if(success === 'false' && mailSent === 'false') {
                    fcns.createModal('Chyba', 'Nastala chyba, objednávka nebyla odeslána. ', 'OK')
                }

            }
            
        }

        if(payment === 'DOB') {
            
            if(params.has('success') && params.has('mailSent')) {

                const success = params.get('success');
                const mailSent = params.get('mailSent');

                if(success === 'true' && mailSent === 'true') {
                    fcns.createModal('Úspěch', 'Objednávka proběhla úspěšně', 'OK')
                }

                if(success === 'true' && mailSent === 'false') {
                    fcns.createModal('Úspěch', 'Objednávka proběhla úspěšně', 'OK')
                }

                if(success === 'false' && mailSent === 'true') {
                    fcns.createModal('Chyba', 'Nastala chyba, objednávka nebyla odeslána', 'OK')
                }

                if(success === 'false' && mailSent === 'false') {
                    fcns.createModal('Chyba', 'Nastala chyba, objednávka nebyla odeslána.', 'OK')
                }
            }
            
        }
    }

    /////
    // MENU
    /////

    // Select hamburger button and attach click listener
    const hamburgerBtn = state.hamburgerBtn = document.querySelector("#hamburger-btn");
    const headerList = hamburgerBtn.nextElementSibling;
    const headerBackDrop = document.querySelector('.header__backdrop');

    const toggleHeader = (e) => {
        e.stopPropagation();

        if(![hamburgerBtn.classList].includes('header__nav-button--hiding')) {

            fcns.showOrHideEl(hamburgerBtn, 'header__nav-button--show', 'header__nav-button--hide', 'header__nav-button--hiding');
            fcns.showOrHideEl(headerList, 'header__nav-list--hidden', 'header__nav-list--visible', 'header__nav-list--hiding');
            fcns.showOrHideEl(headerBackDrop, 'header__backdrop--hidden', 'header__backdrop--visible', 'header__backdrop--hiding');

            for (const listItem of headerList.children) {
                fcns.showOrHideEl(listItem, 'header__nav-item--hidden', 'header__nav-item--visible', 'header__nav-item--hiding');
            }
        }
    }
    headerBackDrop.addEventListener('click', toggleHeader);
    hamburgerBtn.addEventListener("click", toggleHeader);

    ///// Initial update cart amount
    
    const cartAmountEl = document.querySelector('.header__cart-amount');
    const cartAmount = +cartAmountEl.textContent;
    if(cartAmount > 0) {
        cartAmountEl.style.display = 'flex';
    }

    /////
    // CART
    /////

    ///// TO ORDER BUTTON

    const toOrderBtn = document.getElementById('to-order');
    if(toOrderBtn) {
        const orderSection = document.getElementById('cart-order');

        toOrderBtn.addEventListener('click', () => {
            orderSection.scrollIntoView({behavior: 'smooth'});
        })
    }
    
    /////
    // CART & ORDER
    /////

    ///// Submit button event listener
    const orderForm = document.getElementById('order-form');
    if (orderForm) {
        orderForm.addEventListener('submit', ajax.orderSubmitHandler);

        fcns.updateCartPage();
    }


    // Agreement checkbox event listeners 
    
    const agreeGDPR = document.getElementById('agree-gdpr');
    const agreeConditions = document.getElementById('agree-conditions');
    const submitToCartBtn = document.getElementById('submit-order');
    if(orderForm) {
        agreeGDPR.addEventListener('input', () => {
            fcns.refreshSubmitBtn(agreeGDPR, agreeConditions, submitToCartBtn);
        })
        agreeConditions.addEventListener('input', () => {
            fcns.refreshSubmitBtn(agreeGDPR, agreeConditions, submitToCartBtn);
        });
    }

    ///// Input Validation
    if(orderForm) {
        for (const input of formELs) {
            input.addEventListener('input', fcns.validateInput.bind(this, input));
        }
    }

    /////DOB Price is 0 when OOD is selected
    if(orderForm) {

        const orderDelivery = document.getElementById('order-delivery');
        const OODInput = document.getElementById('OOD');
        const DOBpriceEl = document.getElementById('DOBprice');
        const DOBpriceValue = DOBpriceEl.textContent;

        if (OODInput.checked) {
            DOBpriceEl.textContent = '0Kč'
        } else {
            DOBpriceEl.textContent = DOBpriceValue;
        }

        orderDelivery.addEventListener('input', () => {

        if (OODInput.checked) {
            DOBpriceEl.textContent = '0Kč'
        } else {
            DOBpriceEl.textContent = DOBpriceValue;
        }

        }
        )

    }

    //// Managing cart items
    const cartItems = document.querySelectorAll('.cart-item');

    if(orderForm) {

        for(const cartItem of cartItems) {

            const addButton = cartItem.querySelector('.cart-item__amount-box__btn--add');
            const removeButton = cartItem.querySelector('.cart-item__amount-box__btn--remove');
            const removeAllButton = cartItem.querySelector('.close-button');

            addButton.addEventListener('click', async () => {

                const postCartData = {
                    action: 'ADD',
                    productId: cartItem.dataset.productid,
                    csrf: cartItem.dataset.csrf,
                    amount: 1
                }
                
                fcns.addToCart(postCartData).then((updatedCart) => {
                    fcns.updateCartItem(cartItem, updatedCart);
                });
            });
            removeButton.addEventListener('click', () => {

                const postCartData = {
                    action: 'REMOVE',
                    productId: cartItem.dataset.productid,
                    csrf: cartItem.dataset.csrf,
                    amount: 1
                }
                
                fcns.removeFromCart(postCartData).then((updatedCart) => {
                    fcns.updateCartItem(cartItem, updatedCart);

                    
                });
            })
            removeAllButton.addEventListener('click', () => {

                const postCartData = {
                    action: 'REMOVE',
                    productId: cartItem.dataset.productid,
                    csrf: cartItem.dataset.csrf,
                    amount: false
                }

                fcns.removeFromCart(postCartData).then( (updatedCart) => {
                    fcns.updateCartItem(cartItem, updatedCart);
                })

            })
        }
    }
    

    /////
    // E-SHOP
    /////

    ///// SUBMIT TO CART BUTTON
    const eshopProducts = document.querySelector('.eshop__products');

    if (eshopProducts) {
        const submitBtns = eshopProducts.querySelectorAll('.post-order-btn');

        for (const btn of submitBtns) {
            btn.addEventListener('click', async () => {

                const updatedCart = fcns.addToCart(postCartData).then(
                    (updatedCart) => {
                        fcns.updateCartIcon(updatedCart);
                    }

                );
                
            })
        }
    }

    ///// CATEGORY SELECT
    const categorySelect = document.querySelector('.category-select');

    if (categorySelect) {
        
       
        const categorySelectButtons = categorySelect.querySelectorAll('.category-select__button');

        for (const btn of categorySelectButtons) {
            const list = btn.parentElement.querySelector('.category-select__subcategory-list');
        
            btn.addEventListener('click', () => {
                // changes the button style
                fcns.switchClass(btn, 'category-select__button--show', 'category-select__button--hide');
                // shows or removes the subcategory list
                if(list) {fcns.showOrHideEl(list, 'category-select__subcategory-list--hidden', 'category-select__subcategory-list--visible', 'category-select__subcategory-list--hiding');}
            });
        }

        ///// PRODUCT MODAL
        const products = document.querySelectorAll('.product');

        for (const prod of products) {
            const btnShowProdModal = prod.querySelector('.product__info .to-cart-button');
            const btnCloseProdModal = prod.querySelector('.product__modal__close-button');
            const modal = prod.querySelector('.product__modal');
            const btnAddToCart = modal.querySelector('.to-cart-button');
            
            btnShowProdModal.addEventListener('click', () => {
                // Shows product modal
                fcns.switchClass(modal, 'product__modal--toggled', 'product__modal--hidden');

                // Removing focus from the showProdModal button
                btnShowProdModal.blur();

                 // Focusing the modal, so the keydown event can be registered on it
                modal.focus();
            });
            btnCloseProdModal.addEventListener('click', () => {
                // Hides product modal
                fcns.switchClass(modal, 'product__modal--toggled', 'product__modal--hidden');
            });   
            btnAddToCart.addEventListener('click', () => {
                // Hides product modal
                fcns.switchClass(modal, 'product__modal--toggled', 'product__modal--hidden');
            })   
            modal.addEventListener('click', () => {
                // Focusing the, so the keydown event can be registered on it
                modal.focus();
            })
            modal.addEventListener('keydown', (e) => {
                // If the user pressed enter, simulating click on the add-to-cart button
                if(e.key === 'Enter') {
                    btnAddToCart.click();
                }
             })
            
        }

        ///// MOBILE CATEGORY SELECT
        const categorySelectMobileBtn = categorySelect.querySelector('button');

        const categorySelectList = categorySelectMobileBtn.parentElement.querySelector('.category-select__category-list');
        const categorySelectHeading = categorySelectMobileBtn.parentElement.querySelector('.heading-2');
        const categorySelectBackdrop = document.querySelector('.category-select__backdrop');
        
        const footer = document.querySelector('footer');
    
        window.addEventListener('scroll', () => {
            const footerY = footer.getBoundingClientRect().y;
            const btnY = categorySelectMobileBtn.getBoundingClientRect().y;
    
            if (footerY >= btnY) {
                categorySelectList.classList.remove('scrollLocked');
                categorySelectHeading.classList.remove('scrollLocked');
            } else {
                categorySelectList.classList.add('scrollLocked');
                categorySelectHeading.classList.add('scrollLocked');
            }
        });
    
        // Toggle category select on mobile devices

        const toggleCategorySelect = () => {
            fcns.showOrHideEl(categorySelectList, 'category-select__category-list--hidden', 'category-select__category-list--visible', 'category-select__category-list--hiding');
            fcns.showOrHideEl(categorySelectHeading, 'heading-2--hidden', 'heading-2--visible', 'heading-2--hiding');
            fcns.showOrHideEl(categorySelectBackdrop, 'category-select__backdrop--hidden', 'category-select__backdrop--visible', 'category-select__backdrop--hiding');
            fcns.switchClass(categorySelectMobileBtn, 'category-select__mobile-button--show', 'category-select__mobile-button--hide');
    
            if ([...categorySelectMobileBtn.classList].includes('category-select__mobile-button--show')) {
                categorySelectMobileBtn.textContent = 'Zobrazit kategorie';
            } else {
                categorySelectMobileBtn.textContent = 'Skrýt kategorie';
            }
        }

        categorySelectMobileBtn.addEventListener('click', toggleCategorySelect);
        categorySelectBackdrop.addEventListener('click', toggleCategorySelect);
    }
});
